#!/usr/bin/env python3

import argparse
import base64
import getopt
import hashlib
import json
import os
import sys

def main(argv):
    parser = argparse.ArgumentParser(description='Generate the PBKDF2 password hash')

    parser.add_argument('-d', '--digest-algorithm', dest='algorithm', action='store', default='sha256',
                    help='digest algorithm used by PBKDF2 (default: sha256, available: '+', '.join(hashlib.algorithms_available)+')')

    group = parser.add_mutually_exclusive_group()
    group.add_argument('-x', '--hex', dest='is_hex', action='store_true', default=True,
                    help='salt / output is in hex characters (default: true)')
    group.add_argument('-b64', '--base64', dest='is_base64', action='store_true', default=False,
                    help='salt / output is in base64 (default: false)')

    parser.add_argument('-i', '--iterations', dest='iterations', metavar='number', type=int, action='store', default=100000,
                    help='PBKDF2 iterations (default: 100000)')

    parser.add_argument('-l', '--length', dest='derived_key_length', metavar='number', type=int, action='store', default=None,
                    help='derived key length (default: size of the hash algorithm)')

    parser.add_argument('-s', '--salt', dest='input_salt', metavar='salt', action='store', default='',
                    help='PBKDF2 salt (default: randomly generated)')

    parser.add_argument('-j', '--json', dest='json_output', action='store_true', default=False,
                    help='json output (default: false)')

    parser.add_argument('password',
                    help='password to hash')

    args = parser.parse_args()

    if (len(args.input_salt) > 0):
        if args.is_base64:
            salt = base64.b64decode(args.input_salt)
        elif args.is_hex:
            salt = bytes.fromhex(args.input_salt)
    else:
        salt = os.urandom(16)

    algorithm = args.algorithm
    iterations = args.iterations
    password = args.password.encode()
    dklen = args.derived_key_length

    dk = hashlib.pbkdf2_hmac(algorithm, password, salt, iterations, dklen)

    if args.is_base64:
        output_key = base64.b64encode(dk).decode('ascii')
        output_salt = base64.b64encode(salt).decode('ascii')
    elif args.is_hex:
        output_key = dk.hex()
        output_salt = salt.hex()

    if args.json_output:
        print(json.dumps({'algorithm': 'pbkdf2-'+algorithm, 'hashIterations': iterations}))
        print(json.dumps({'value': output_key, 'salt': output_salt}))
    else:
        print('algorithm: pbkdf2-' + algorithm)
        print('hashIterations: ' + str(iterations))
        print('value: ' + output_key)
        print('salt: ' + output_salt)

    exit(0)

if __name__ == "__main__":
   main(sys.argv[1:])